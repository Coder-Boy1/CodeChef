#include <bits/stdc++.h>

using namespace std;

#define int long long
#define LG 25
#define N 250005

int tim=0, n;
int parent[LG][N];
int tin[N], tout[N], level[N], sz[N], ans[N], tot[N];
vector < int > a[N];

void dfs(int k, int par, int lvl)
{
        tin[k]=++tim;
        parent[0][k]=par;
        level[k]=lvl;
        sz[k]=1;
        for(int i=0;i<a[k].size();i++)
        {       
                int it = a[k][i];
                if(it==par)
                        continue;
                dfs(it, k, lvl+1);
                sz[k]+=sz[it];
        }
        tout[k]=tim;
}

void findme(int k,int par,int cur)
{
        ans[k]=cur;

        int temp=0, cursize=sz[k]-1;

        for(int i=0;i<a[k].size();i++)
        {
                int it=a[k][i];
                if(it==par)
                        continue;
                cursize-=sz[it];
                
                temp+=sz[it]*(cursize);
        } 
        tot[k]=temp;

        for(int i=0;i<a[k].size();i++)
        {
                int it= a[k][i];
                if(it==par)
                        continue;
                int x = cur + temp - (sz[it]*(sz[k]-1-sz[it])) + (sz[k]-1-sz[it]);
                findme(it, k, x);
        }
}

int walk(int u, int h)
{
        for(int i=LG-1;i>=0;i--)
        {
                if((h>>i) & 1)
                        u = parent[i][u];
        }
        return u;
}

void precompute()
{
        for(int i=1;i<LG;i++)
                for(int j=1;j<=n;j++)
                        if(parent[i-1][j])
                                parent[i][j]=parent[i-1][parent[i-1][j]];
}

int LCA(int u, int v)
{
        if(level[u]<level[v])
                swap(u,v);
        int diff=level[u]-level[v];
        for(int i=LG-1;i>=0;i--)
        {
                if((1<<i) & diff)
                {
                        u=parent[i][u];
                }
        }
        if(u==v)
                return u;
        for(int i=LG-1;i>=0;i--)
        {
                if(parent[i][u] && parent[i][u]!=parent[i][v])
                {
                        u=parent[i][u];
                        v=parent[i][v];
                }
        }
        return parent[0][u];
}

int dist(int u, int v)
{
        return level[u] + level[v] - 2 * level[LCA(u, v)];
}



int getter(int x, int lca)
{
        int p = level[x] - level[lca];
        p = walk(x, p-1);
        return p;
}

void boo()
{
        tim =0 ;
        for(int i=1;i<=n;i++)
        {
                tin[i]=0;
                tout[i]=0;
                level[i]=0;
                sz[i]=0;
                ans[i]=0;
                tot[i]=0;
                a[i].clear();
        }
        for(int i=1;i<=n;i++)
        {
                for(int j=0;j<LG;j++)
                {
                        parent[j][i]=0;
                }
        }
}

int32_t main()
{
        ios_base::sync_with_stdio(false);
        cin.tie(NULL);

        int t;
        cin>>t;

        while(t--)
        {
                int q;
                cin>>n>>q;
                boo();
                for(int i=0;i<n-1;i++)
                {
                        int u, v;
                        cin>>u>>v;
                        a[u].push_back(v);
                        a[v].push_back(u);
                }

                dfs(1, 0, 0);
                precompute();
                findme(1, 0 ,0);

                for(int i=1;i<=n;i++)
                {
                      //  cout<<ans[i]<<" "<<tot[i]<<endl;
                }
                for(int i=0;i<q;i++)
                {
                        int u, v;
                        cin>>u>>v;
                        int lca= LCA(u, v);
                        int x=0;
                        if(u==v)
                        {
                                x = tot[u];
                                x+= (n-sz[u])*(sz[u]);
                                x+= sz[u];
                        }
                        else if(lca==u)
                        {
                                int y= getter(v,lca);
                                x = ans[v] - ans[y];
                                x+= abs(level[v]-level[lca]+1);
                                x+= tot[lca];
                                int p= sz[lca]-1-sz[y];
                                x-= sz[y]*(p);
                                x+= (n-sz[lca])*(p+1);
                                x+= p;
                                x+= tot[v];
                                x+= sz[v]-1;
                        }
                        else if(lca==v)
                        {
                                int y= getter(u,lca);
                                x = ans[u] - ans[y];
                                x+= abs(level[u]-level[lca]+1);
                                x+= tot[lca];
                                int p= sz[lca]-1-sz[y];
                                x-= sz[y]*(p);
                                x+= (n-sz[lca])*(p+1);
                                x+= p;
                                x+=tot[u];
                                x+=sz[u]-1;
                        }
                        else
                        {
                                int x1 = getter(u, lca);
                                int y1= getter(v,lca);
                                x = ans[u] - ans[x1];
                                x+= ans[v] - ans[y1];
                                x+=abs(level[u]-level[lca]);
                                x+=abs(level[v]-level[lca]);
                                x++;
                                x+= tot[u] + tot[v] + tot[lca];
                                x+= sz[u]-1;
                                x+= sz[v]-1;
                                int p = sz[lca] - 1 - sz[x1] - sz[y1];
                                int z = n- sz[lca];
                                x-= sz[x1]*sz[y1];
                                x-= p* sz[x1];
                                x-= p* sz[y1];
                                x+= p;
                                x+= z*(p+1);        
                        }
                        cout<<x<<"\n";
                }
        }

        return 0;
}
